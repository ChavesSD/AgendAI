/**
 * Script para limpar definitivamente planos e empresas padr√£o do AgendAI
 * Este script √© executado automaticamente e remove permanentemente todos os dados padr√£o
 */

(function() {
    // Evitar execu√ß√µes repetidas
    if (window.clearDefaultsExecuted) {
        return;
    }
    window.clearDefaultsExecuted = true;
    
    console.log('üßπ Iniciando limpeza definitiva de dados padr√£o...');
    
    // Fun√ß√£o para limpar todos os planos padr√£o
    function limparPlanosDefinitivamente() {
        try {
            // Verificar se j√° foi limpo
            if (localStorage.getItem('agendai_plans_removed') === 'true') {
                console.log('‚úÖ Planos j√° foram removidos anteriormente');
                return true;
            }
            
            // Marcar que todos os planos foram exclu√≠dos intencionalmente
            localStorage.setItem('agendai_plans_cleared', 'true');
            
            // Limpar a lista de planos
            localStorage.setItem('agendai_plans', JSON.stringify([]));
            
            // Marcar todos os IDs de planos padr√£o como exclu√≠dos
            const planosExcluidos = [1, 2, 3]; // IDs dos planos padr√£o
            localStorage.setItem('agendai_excluded_plans', JSON.stringify(planosExcluidos));
            
            // Limpar a vari√°vel global se existir
            if (typeof window.plans !== 'undefined') {
                window.plans = [];
            }
            
            // Marcar como removido para n√£o executar novamente
            localStorage.setItem('agendai_plans_removed', 'true');
            
            console.log('‚úÖ Planos padr√£o removidos definitivamente');
            return true;
        } catch (error) {
            console.error('‚ùå Erro ao limpar planos padr√£o:', error);
            return false;
        }
    }
    
    // Fun√ß√£o para limpar todas as empresas padr√£o
    function limparEmpresasDefinitivamente() {
        try {
            // Verificar se j√° foi limpo
            if (localStorage.getItem('agendai_companies_cleared') === 'true') {
                console.log('‚úÖ Empresas j√° foram removidas anteriormente');
                return true;
            }
            
            // Marcar que todas as empresas foram exclu√≠das intencionalmente
            localStorage.setItem('agendai_companies_cleared', 'true');
            
            // Limpar a lista de empresas
            localStorage.setItem('agendai_companies', JSON.stringify([]));
            
            // Marcar todos os CNPJs de empresas padr√£o como exclu√≠dos (se existir esse mecanismo)
            const empresasExcluidas = ['00000000000000', '11111111111111', '22222222222222']; // CNPJs ou IDs das empresas padr√£o
            localStorage.setItem('agendai_excluded_companies', JSON.stringify(empresasExcluidas));
            
            // Limpar a vari√°vel global se existir
            if (typeof window.companies !== 'undefined') {
                window.companies = [];
            }
            
            console.log('‚úÖ Empresas padr√£o removidas definitivamente');
            return true;
        } catch (error) {
            console.error('‚ùå Erro ao limpar empresas padr√£o:', error);
            return false;
        }
    }

    // Criar flag permanente para indicar que os dados padr√£o foram removidos
    function marcarDadosPadraoRemovidos() {
        try {
            localStorage.setItem('agendai_defaults_removed', 'true');
            console.log('‚úÖ Flag de remo√ß√£o de dados padr√£o configurada');
            return true;
        } catch (error) {
            console.error('‚ùå Erro ao configurar flag de remo√ß√£o:', error);
            return false;
        }
    }
    
    // Fun√ß√£o para executar a limpeza
    function executarLimpezaDefinitiva() {
        // Verificar se a limpeza j√° foi realizada anteriormente
        if (localStorage.getItem('agendai_defaults_removed') === 'true') {
            console.log('‚úÖ Dados padr√£o j√° foram removidos anteriormente');
            return;
        }
        
        console.log('üîÑ Executando limpeza definitiva de dados padr√£o...');
        
        // Executar a limpeza
        const planosLimpos = limparPlanosDefinitivamente();
        const empresasLimpas = limparEmpresasDefinitivamente();
        
        // Se ambas as limpezas foram bem-sucedidas, marcar como conclu√≠do
        if (planosLimpos && empresasLimpas) {
            marcarDadosPadraoRemovidos();
            console.log('‚úÖ Limpeza definitiva de dados padr√£o conclu√≠da com sucesso');
        } else {
            console.warn('‚ö†Ô∏è Limpeza parcial: nem todos os dados puderam ser removidos');
        }
    }
    
    // Sobrescrever fun√ß√µes de restaura√ß√£o para evitar que dados padr√£o retornem
    function sobrescreverFuncoesRestauracao() {
        try {
            // Sobrescrever window.restaurarPlanosPadrao se existir
            if (typeof window.restaurarPlanosPadrao === 'function') {
                const originalRestaurarPlanos = window.restaurarPlanosPadrao;
                window.restaurarPlanosPadrao = function(...args) {
                    console.log('‚ö†Ô∏è Tentativa de restaurar planos padr√£o bloqueada - planos foram removidos definitivamente');
                    return false;
                };
                console.log('‚úÖ Fun√ß√£o restaurarPlanosPadrao sobrescrita para impedir restaura√ß√£o');
            }
            
            // Sobrescrever outras fun√ß√µes de restaura√ß√£o se necess√°rio
            if (typeof window.restaurarEmpresasPadrao === 'function') {
                const originalRestaurarEmpresas = window.restaurarEmpresasPadrao;
                window.restaurarEmpresasPadrao = function(...args) {
                    console.log('‚ö†Ô∏è Tentativa de restaurar empresas padr√£o bloqueada - empresas foram removidas definitivamente');
                    return false;
                };
                console.log('‚úÖ Fun√ß√£o restaurarEmpresasPadrao sobrescrita para impedir restaura√ß√£o');
            }
            
            return true;
        } catch (error) {
            console.error('‚ùå Erro ao sobrescrever fun√ß√µes de restaura√ß√£o:', error);
            return false;
        }
    }
    
    // Executar a limpeza ao carregar o script
    executarLimpezaDefinitiva();
    
    // Sobrescrever fun√ß√µes de restaura√ß√£o
    sobrescreverFuncoesRestauracao();
    
    // Executar apenas uma vez, n√£o em cada carregamento de p√°gina
    if (!window.cleanupUIExecuted) {
        window.cleanupUIExecuted = true;
        
        // Remover poss√≠veis bot√µes de restaura√ß√£o da interface
        window.addEventListener('DOMContentLoaded', function() {
            setTimeout(function() {
                try {
                    // Remover bot√µes de restaura√ß√£o de planos
                    const btnRestaurarPlanos = document.getElementById('restaurarPlanosPadrao');
                    if (btnRestaurarPlanos) {
                        btnRestaurarPlanos.remove();
                        console.log('‚úÖ Bot√£o de restaura√ß√£o de planos removido da interface');
                    }
                    
                    // Remover bot√µes de restaura√ß√£o de empresas
                    const btnRestaurarEmpresas = document.getElementById('restaurarEmpresasPadrao');
                    if (btnRestaurarEmpresas) {
                        btnRestaurarEmpresas.remove();
                        console.log('‚úÖ Bot√£o de restaura√ß√£o de empresas removido da interface');
                    }
                    
                    // Substituir mensagens de "nenhum plano" para n√£o mostrar bot√£o de restaura√ß√£o
                    const mensagensVazias = document.querySelectorAll('[colspan]');
                    mensagensVazias.forEach(msg => {
                        if (msg.textContent.includes('Restaurar planos padr√£o') || 
                            msg.textContent.includes('Restaurar empresas padr√£o')) {
                            msg.innerHTML = `
                                <div class="text-muted mb-3">
                                    <i class="fas fa-info-circle me-2"></i>
                                    Nenhum item cadastrado.
                                </div>
                            `;
                            console.log('‚úÖ Mensagem de restaura√ß√£o substitu√≠da');
                        }
                    });
                    
                } catch (error) {
                    console.error('‚ùå Erro ao remover elementos de restaura√ß√£o da interface:', error);
                }
            }, 1000);
        });
    }
    
    // Verificar se a limpeza de planos j√° foi executada
    if (!localStorage.getItem('agendai_plans_removed')) {
        console.log('üßπ Limpando dados de planos do localStorage...');
        
        // Remover todas as entradas do localStorage relacionadas a planos
        localStorage.removeItem('agendai_plans');
        localStorage.removeItem('agendai_plans_v2');
        localStorage.removeItem('agendai_plans_cleared');
        localStorage.removeItem('agendai_excluded_plans');
        
        // Limpar tamb√©m window.plans
        if (typeof window.plans !== 'undefined') {
            window.plans = undefined;
            console.log('üßπ Vari√°vel window.plans limpa');
        }
        
        // Marcar como limpo para n√£o executar novamente
        localStorage.setItem('agendai_plans_removed', 'true');
        console.log('‚úÖ Todos os dados de planos removidos com sucesso');
    }
    
    console.log('‚úÖ Script de limpeza definitiva carregado com sucesso');
})(); 